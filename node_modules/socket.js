
	exports.start = function(io) {

		var chr			= [], // lista as funcionalidades
			listChr		= [],
			scenario	= {},
			newColl;

			// cenario padrao
			scenario['000000000'] = {
				'id'		: '000000000',
				'name'		: 'GLOBAL',
				'width'		: '1500',
				'height'	: '1500',
				'listChr'	: []
			}
		
		io.sockets.on('connection',function(socket){
			
			// enviando lista dos cenarios
			io.sockets.emit('list scenarios', scenario);

			// referenciando um novo manipulador
			chr[socket.id] = require("chr").create(newColl);
			
			// recebendo cenario criado
			socket.on('created scenario', function(data) {
				var status = false;
				
				for(var id in scenario) {
					if(String(scenario[id].id) === String(chr[socket.id].getId()) || scenario[id].name === data.name) {
						
						status = true;
						
						break;
						
					}
				}
				
				if(status === false) {
					scenario[String(chr[socket.id].getId())] = {
		 				'id'		: String(chr[socket.id].getId()),
		 				'name'		: data.name,
		 				'width'		: data.width,
		 				'height'	: data.height,
						'listChr'	: []
		 			}
				 	
					 // enviando lista dos cenarios
					io.sockets.emit('list scenarios', scenario);
				 	
				 	socket.emit('sending scenario', data);
				 	
				 	// vinculando id chr ao id scenario
				 	chr[socket.id].setScenarioId(String(chr[socket.id].getId()));
				} 
			});
			
			// recebendo cenario escolhido
			socket.on('selected scenario', function(data) {
				for(var id in scenario) {
					if(scenario[id].id === data) {
						
						socket.emit('sending scenario', scenario[id]); 
						
						// vinculando id chr ao id scenario
						chr[socket.id].setScenarioId(scenario[id].id);
						
					 	break;
					}
				}
			});
			
			// criando novo chr
			socket.on('create',function(display){
				var scId = String(chr[socket.id].getScenarioId());

				chr[socket.id].setDisplay(display);
				
				// formato dos dados usados na criação
				var newChr = {
					'id'			: chr[socket.id].getId(),
					'nick'			: chr[socket.id].getNick(),
					'chr'			: chr[socket.id].getChr(),
					'positionY'		: chr[socket.id].getPositionY(),
					'positionX'		: chr[socket.id].getPositionX(),
					'newPositionY'	: chr[socket.id].getPositionY(),
					'newPositionX'	: chr[socket.id].getPositionX(),
					'angle'			: 0
				}
				
				scenario[scId].listChr[socket.id] = newChr;
				
				// cria o element referente ao chr proprio
				// e todos outros chrs ja existentes no cenario
				socket.emit('create new chr',{ 'all': chr[socket.id].verifyListChr(scenario[scId].listChr), 'me': newChr});

				socket.join(scId);
				
				// cria o novo chr element nos outros terminais já conectados
				socket.broadcast.to(scId).emit('Do you want new listchr?');
				
				/*
				// cria o novo chr element nos outros terminais já conectados
				socket.broadcast.emit('Do you want new listchr?');
				 */
			});
			
			socket.on('Yes, I want!', function() {
				var scId = String(chr[socket.id].getScenarioId());
				
				socket.emit('receiving new listchr',chr[socket.id].verifyListChr(scenario[scId].listChr));
			});
			
			socket.on('post chr', function(data) {
				var scId = String(chr[socket.id].getScenarioId());
				
				chr[socket.id].setPositionY(data.newPositionY);
				chr[socket.id].setPositionX(data.newPositionX);
				
				scenario[scId].listChr[socket.id].positionY = data.positionY;
				scenario[scId].listChr[socket.id].positionX = data.positionX;
				scenario[scId].listChr[socket.id].newPositionY = data.newPositionY;
				scenario[scId].listChr[socket.id].newPositionX = data.newPositionX;
				
				
				// BUG AO RECEBER A LISTA/
				// QUANDO É VERIFICADO A LISTA, DEVE MANTER O SEU ESTADO ANTIGO
				// AO MOVIMENTAR O CHR, SEU SENTIDO É REFLETIDO EM TODOS OUTROS
				// ESTUDAR A POSSIBILIDADE DE USAR BROADCAST COM SOCKET.EMIT
				// IO.SOCKETS.EMIT VAI ENVIAR A LISTA PARA TODOS OS OUTROS CENARIOS,
				// DEVEMOS EVITAR 
				
				//socket.broadcast.emit('Do you want new listchr?');
				//io.sockets.emit('Do you want new listchr?');
				socket.broadcast.to(scId).emit('Do you want new listchr?');
				socket.emit('Do you want new listchr?');
			});
			
			socket.on('say', function(data) {
				var scId = String(chr[socket.id].getScenarioId());
				
				socket.broadcast.to(scId).emit('read', {
					'id'	: scenario[scId].listChr[socket.id].id,
					'nick'	: scenario[scId].listChr[socket.id].nick,
					'msg'	: data
				});
			});
			
			socket.on('draw free first point', function(data) {
				var scId = String(chr[socket.id].getScenarioId());
				
				socket.broadcast.to(scId).emit('you draw first point', {
				//socket.broadcast.emit('you draw first point', {
					'id'	: scenario[scId].listChr[socket.id].id,
					'x'		: data.x,
					'y'		: data.y
				});
			});
			
			socket.on('draw free', function(data) {
				var scId = String(chr[socket.id].getScenarioId());
				
				socket.broadcast.to(scId).emit('you draw', {
				//socket.broadcast.emit('you draw', {
					'id'	: scenario[scId].listChr[socket.id].id,
					'x'		: data.x,
					'y'		: data.y
				});
			});
			
			// desconectar
			socket.on('disconnect', function(err) {		
				var scId = String(chr[socket.id].getScenarioId());
				
				// remove chr desconectado do cenario e sistema
				delete scenario[scId].listChr[socket.id];
				delete chr[socket.id];
				
				// referente ao numero de chrs remanescentes no cenario
				var count = 0;
				
				for(var id in scenario[scId].listChr) {
					count++;
				}
				
				// REMOVE O OBJETO MANIPULADOR DO USUARIO DESCONECTADO
				if(count < 1 && scenario[scId].name !== 'GLOBAL') {
					// elimina o cenario por falta de chrs
					delete scenario[scId];
				} else {
					// apenas encaminha aos chrs do cenario a nova listagem
					socket.broadcast.to(scId).emit('Do you want new listchr?');
					//socket.broadcast.emit('Do you want new listchr?');
				}
			});
		});
		
		return {
			getColl: function(data) {
				newColl = data;
			}
		}
	};